/**
 * 我一开始的思路是把动画分成6个阶段，也就是三个圆的放大、缩小的过程。
 * 但是答案的实现更好，它只把动画分成三个阶段，也就是放大的那三个，缩
 * 小的部分直接使用`animation-fill: alternate`
 */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.v-h-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

body {
  height: 100vh;
  width: 100vw;

  .v-h-center();

}

// 这个time-function从快到慢，能让动画在达到100%的时候，有一种
// "定格感"
@bezier: cubic-bezier(.21,.98,.6,.99);

.container {
  height: 400px;
  width: 400px;
  background: #E56262;

  .v-h-center();

  .loading {
    .dot {
      background-color: white;
      border-radius: 50%;
    }
    .dot-1 {
      .v-h-center();
      width: 90px;
      height: 90px;
      animation: jump-jump-1 2s @bezier infinite alternate;
      .dot-2 {
        .v-h-center();
        width: 60px;
        height: 60px;
        animation: jump-jump-2 2s @bezier infinite alternate;
        .dot-3 {
          width: 30px;
          height: 30px;
          animation: jump-jump-3 2s @bezier infinite alternate;
        }
      }
    }

    @keyframes jump-jump-1 {
      0%, 10% {
        // 1) 光源在左上角：所以shadow有个等值的x,y偏移
        // 2) 随着圆圈越来越大，阴影也越来越大
        // 3) 参考答案在阴影最小的时候，向外延伸了2px，我有点不理解。有这个必要吗？
        box-shadow: 2px 2px 2px 0 rgba(0, 0, 0, 0.2);
        transform: scale(0);
      }

      100% {
        box-shadow: 10px 10px 15px 0 rgba(0, 0, 0, 0.3);
        transform: scale(1);
      }
    }

    @keyframes jump-jump-2 {
      0%, 40% {
        box-shadow: 2px 2px 2px 0 rgba(0, 0, 0, 0.2);
        transform: scale(0);
      }

      100% {
        box-shadow: 10px 10px 15px 0 rgba(0, 0, 0, 0.3);
        transform: scale(1);
      }

    }

    @keyframes jump-jump-3 {
      0%, 70% {
        box-shadow: 2px 2px 2px 0 rgba(0, 0, 0, 0.2);
        transform: scale(0);
      }

      100% {
        box-shadow: 10px 10px 15px 0 rgba(0, 0, 0, 0.3);
        transform: scale(1);
      }
    }
  }
}
